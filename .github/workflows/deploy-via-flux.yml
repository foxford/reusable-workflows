name: Deploy via Flux

on:
  workflow_call:
    secrets:
      kube_config_base64:
        required: true
      gh_token:
        required: true
    inputs:
      cluster:
        required: true
        type: string
      namespace:
        required: true
        type: string
      service:
        required: false
        type: string
        default: .
      version:
        description: 'Commit/tag/branch'
        required: true
        default: 'master'
        type: string
      release:
        description: 'Release name'
        type: string
        required: false

env:
  CHART_DIR: app
  FLUXCD_DIR: fluxcd
  WORKDIR: ${{ inputs.service }}
  TAG_PREFIX: "${{ inputs.service }}-"

jobs:
  deploy:

    runs-on: buildjet-2vcpu-ubuntu-2204
    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.version }}
        fetch-depth: 0
        path: ${{ env.CHART_DIR }}

    - name: Checkout FluxCD repo
      uses: actions/checkout@v4
      with:
        repository: foxford/fluxcd
        token: ${{ secrets.gh_token }}
        path: ${{ env.FLUXCD_DIR }}

    - name: Install yq
      run: |
        mkdir -p ${HOME}/.local/bin
        export PATH=${HOME}/.local/bin:${PATH}
        command -v yq || (wget -q https://github.com/mikefarah/yq/releases/download/v4.27.2/yq_linux_amd64 -O ${HOME}/.local/bin/yq && \
                          chmod u+x ${HOME}/.local/bin/yq)
        echo "PATH=${PATH}" >> $GITHUB_ENV

    - name: Get versions
      run: |
        if [[ ${{ inputs.cluster }} == "prod" ]]
        then
          echo Failed to run deploy because it\'s prohibited to deploy into production without GIT tag
          exit 1
        fi

        cd ${{ env.CHART_DIR }}/${WORKDIR}/

        export RELEASE_NAME=${{ inputs.release }}
        if [ ! ${RELEASE_NAME} ]
        then
          export RELEASE_NAME=$(yq '.name' chart/Chart.yaml)
        fi
        
        ###
        # Значение inputs.version определяет значения CHART_VERSION и IMAGE_VERSION следующим образом:
        # - основная ветка (т.е. main или master):
        #   - CHART_VERSION - релиз-версия в последнем комите основной ветки;
        #   - IMAGE_VERSION - последняя релиз-версия;
        # - тег (т.е. v0.0.0 или application-v0.0.0):
        #   - CHART_VERSION - релиз-версия в комите заданного тега;
        #   - IMAGE_VERSION - релиз-версия соответствующая тегу;
        # - любая другая ветка:
        #   - CHART_VERSION - пре-релиз версия с хешем последнего комита заданной ветки;
        #   - IMAGE_VERSION - пре-релиз версия с хешем последнего комита заданной ветки.
        ###
        
        export CHART_VERSION=$(yq '.version' chart/Chart.yaml)

        if [[ ${{ inputs.version }} =~ ^[v]?[0-9]+\.[0-9]+\.[0-9]+$                  || \
              ${{ inputs.version }} =~ ^"${TAG_PREFIX}"[v]?[0-9]+\.[0-9]+\.[0-9]+$   || \
              ${{ inputs.version }} == ${{ github.event.repository.default_branch }} ]]
        then
          echo Flux will use chart version w/o hashes

          if [ $WORKDIR != "." ]; then
            # monorepo case
            export IMAGE_VERSION=$(git describe --tags --always --match "${TAG_PREFIX}*" --abbrev=0 | sed -e "s/${TAG_PREFIX}//")
          else
            # regular repo case
            export IMAGE_VERSION=$(git describe --tags --always --abbrev=0)
          fi
        else
          export HEAD_COMMIT=$(git rev-parse --short=7 HEAD)
          export CHART_VERSION="${CHART_VERSION}-g${HEAD_COMMIT}"

          if [ $WORKDIR != "." ]; then
            # monorepo case
            export IMAGE_VERSION=$(git describe --tags --always --match "${TAG_PREFIX}*" | sed -e "s/${TAG_PREFIX}//")
          else
            # regular repo case
            export IMAGE_VERSION=$(git describe --tags --always)
          fi
        fi

        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
        echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV
        echo "CHART_VERSION=${CHART_VERSION}" >> $GITHUB_ENV

    - name: Patch FluxCD
      run: |
        cd ${{ env.FLUXCD_DIR }}/clusters/${{ inputs.cluster }}/${{ inputs.namespace }}/${RELEASE_NAME}
        yq -i '.spec.chart.spec.version = strenv(CHART_VERSION)' release.yaml
        yq -i '.spec.values.app.image.tag = strenv(IMAGE_VERSION)' release.yaml
        git diff
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -m "Update chart ${RELEASE_NAME} to version ${CHART_VERSION} in namespace ${{ inputs.namespace }}" release.yaml
        git push

    - name: Reconcile FluxCD
      run: |
        wget -q https://github.com/fluxcd/flux2/releases/download/v0.33.0/flux_0.33.0_linux_amd64.tar.gz -O flux.tar.gz
        tar -xf flux.tar.gz
        chmod +x flux

        echo ${KUBECONFIG_BASE64} | base64 -d > ${KUBECONFIG}
        ./flux reconcile ks ${{ inputs.namespace }} --with-source
      env:
        KUBECONFIG_BASE64: ${{ secrets.kube_config_base64 }}
        KUBECONFIG: /tmp/kubeconfig

